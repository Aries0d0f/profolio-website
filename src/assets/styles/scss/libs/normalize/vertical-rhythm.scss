/**
  * Forked from Normalize v7.0.1 by John Albin Wilkins (@JohnAlbin), Remastered by Aries Cs (@Aries0d0f)
  *
  * @source https://github.com/JohnAlbin/normalize-scss/blob/7.0.1/sass/normalize/_vertical-rhythm.scss
  * @author Nicolas Gallagher (@necolas)
  * @author John Albin Wilkins (@JohnAlbin)
  * @author Aries Cs (@Aries0d0f)
  * @license
  * Copyright Â© Nicolas Gallagher and Jonathan Neal and John Albin Wilkins
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of
  * this software and associated documentation files (the "Software"), to deal in
  * the Software without restriction, including without limitation the rights to
  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  * of the Software, and to permit persons to whom the Software is furnished to do
  * so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be included in all
  * copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */

/**
  * Vertical Rhythm
  *
  * This is the minimal amount of code needed to create vertical rhythm in our
  * CSS. If you are looking for a robust solution, look at the excellent Typey
  * library. @see https://github.com/jptaranto/typey
  */

@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {
  @if unit($value) != px {
    @error "The normalize vertical-rhythm module only supports px inputs. The typey library is better.";
  }
  @if $unit == rem {
    @return ($value / $base-font-size) * 1rem;
  } @else if $unit == em {
    @return ($value / $relative-to) * 1em;
  } @else { // $unit == px
    @return $value;
  }
}

@mixin normalize-font-size($value, $relative-to: $base-font-size) {
  @if unit($value) != 'px' {
    @error "normalize-font-size() only supports px inputs. The typey library is better.";
  }

  font-size: normalize-rhythm($value, $relative-to);
}

@mixin normalize-rhythm($property, $values, $relative-to: $base-font-size) {
  $value-list: $values;
  $sep: space;
  @if type-of($values) == 'list' {
    $sep: list.separator($values);
  } @else {
    $value-list: list.append((), $values);
  }

  $normalized-values: ();
  @each $value in $value-list {
    @if unitless($value) and $value != 0 {
      $value: $value * normalize-rhythm($base-line-height, $relative-to);
    }

    $normalized-values: list.append($normalized-values, $value, $sep);
  }

  #{$property}: $normalized-values;
}

@mixin normalize-margin($values, $relative-to: $base-font-size) {
  @include normalize-rhythm(margin, $values, $relative-to);
}

@mixin normalize-line-height($font-size, $min-line-padding: 2px) {
  $lines: math.ceil($font-size / $base-line-height);

  // If lines are cramped include some extra leading.
  @if ($lines * $base-line-height - $font-size) < $min-line-padding * 2 {
    $lines: $lines + 1;
  }
  @include normalize-rhythm(line-height, $lines, $font-size);
}
